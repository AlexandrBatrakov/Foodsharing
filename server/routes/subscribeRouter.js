const router = require('express').Router();
const fetch = require('node-fetch');
const { Telegraf } = require('telegraf');
const User = require('../models/user');
const Products = require('../models/product');
const Categories = require('../models/categories');

const bot = new Telegraf('1714842459:AAEURksRGz6e97Yf4wsppoxddL8iCzoyFJw');

router.get('/', async (req, res) => {
  if (req.session.passport) {
    try {
      const user = await User.findById(req.session.passport.user);
      res.json({ subscribe: user.subscribes });
    } catch (error) {
      res.sendStatus(500);
    }
  } else {
    res.sendStatus(401);
  }
});

router.post('/', async (req, res) => {
  if (req.session.passport) {
    try {
      const user = await User.findById(req.session.passport.user);
      let valid = false;
      user.subscribes.forEach((e) =>
        String(e) === String(req.body.category) ? (valid = true) : null
      );
      if (valid) {
        const category = await Categories.findOne({ name: req.body.category });
        category.subscribers = category.subscribers.filter(
          (e) => String(e) !== String(user._id)
        );
        user.subscribes = user.subscribes.filter(
          (e) => String(e) !== String(req.body.category)
        );
        await category.save();
        await user.save();
      } else {
        await Categories.findOneAndUpdate(
          {
            name: req.body.category,
          },
          {
            $push: { subscribers: req.session.passport.user },
          },
          { safe: true, upsert: true, new: true }
        );
        user.subscribes = [...user.subscribes, req.body.category];
        await user.save();
      }

      res.sendStatus(200);
    } catch (error) {
      res.sendStatus(500);
    }
  } else {
    res.sendStatus(401);
  }
});

router.delete('/', async (req, res) => {
  if (req.session.passport) {
    try {
      const user = await User.findById(req.session.passport.user);
      user.subscribes = user.subscribes.filter(
        (el) => el !== req.body.category
      );
      const category = await Categories.findOne({ name: req.body.category });
      category.subscribers = category.subscribers.filter(
        (el) => String(el) !== String(req.session.passport.user)
      );
      await category.save();
      await user.save();
      res.sendStatus(200);
    } catch (error) {
      res.sendStatus(500);
    }
  } else {
    res.sendStatus(401);
  }
});

router.get('/message/:category/:id', async (req, res) => {
  const categories = {
    Fruits: '—Ñ—Ä—É–∫—Ç—ã',
    Vegetables: '–æ–≤–æ—â–∏',
    BabyFood: '–¥–µ—Ç—Å–∫–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
    BakeryProducts: '—Ö–ª–µ–± –∏ –≤—ã–ø–µ—á–∫–∞',
    Beverages: '–Ω–∞–ø–∏—Ç–∫–∏',
    MilkProducts: '–º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
    Canned: '–∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ',
    Meat: '–º—è—Å–æ, —Ä—ã–±–∞',
    HomeFood: '–¥–æ–º–∞—à–Ω—è—è –∫—É—Ö–Ω—è',
    Cereals: '–∫—Ä—É–ø—ã',
  };
  try {
    const category = await Categories.findOne({ name: req.params.category });
    category.subscribers.forEach(async (e) => {
      const user = await User.findById(e);
      const product = await Products.findById(req.params.id);
      bot.telegram.sendMessage(
        Number(user.telegramid),
        `ü•∑ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${
          categories[req.params.category]
        } –Ω–æ–≤—ã–π –ø–æ—Å—Ç –∑–∞–≥–ª—è–Ω–∏ —ç—Ç–æ ${product.name} –ø–æ –∞–¥—Ä–µ—Å—É:üìç${
          product.geolocation
        } \n //food/${req.params.id}`
      );
      // bot.telegram.sendPhoto(Number(user.telegramid), product.photo);
    });
    res.sendStatus(200);
  } catch (error) {
    res.sendStatus(500);
  }
});

module.exports = router;
